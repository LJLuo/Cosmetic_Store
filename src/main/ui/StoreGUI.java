package ui;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.*;

import model.Event;
import model.EventLog;
import model.MakeUp;
import model.Product;
import model.ShoppingCart;
import model.Singleton;
import model.SkinCare;
import persistance.JsonReader;
import persistance.JsonWriter;

// A Swing GUI application of a online cosmetic store.
// Image presented after clicking "quit" button is AI generated by Google Gemini
public class StoreGUI {
    private static final String onlineStoreSC = "./data/OnlineStoreSC.json";
    private ShoppingCart shoppingCart;
    private Singleton catologue;
    private JsonWriter jsonWriterSC;
    private JsonReader jsonReaderSC;

    private JCheckBox tfCB;
    private JCheckBox skiiCB;
    private JCheckBox fbCB;
    private JCheckBox toCB;
    private JButton backFromCartButton;
    private JButton backFromCatologuButton;
    private JButton addToCartButton;
    private JButton startShoppingButton;
    private JButton viewShoppingCartButton;
    private JButton removeItemButton;
    private JButton loadProgressButton;
    private JButton saveProgressButton;
    private JButton quitButton;

    private JFrame frame;
    private JPanel menuPanel;
    private JPanel catologuePanel;
    private JList<String> shoppingCartList;
    private DefaultListModel<String> listModel;
    private Product tf;
    private Product skii;
    private Product fb;
    private Product to;
    private EventLog el;
    private WindowAdapter wa;

    // MODIFIES: this
    // EFFECTS: instantiate the frame and panels needed for this application.
    // Event log should be printed out once frame is closed
    public StoreGUI() {
        shoppingCart = new ShoppingCart();
        catologue = Singleton.getInstance();
        jsonReaderSC = new JsonReader(onlineStoreSC);
        jsonWriterSC = new JsonWriter(onlineStoreSC);
        wa = new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                el = EventLog.getInstance();
                for (Event event : el) {
                    System.out.println(event.getDescription());
                }
            }
        };
        initElements();
        frame = new JFrame();
        frame.setLayout(new BorderLayout());
        frame.addWindowListener(wa);
        menuPanel = createMenuPanel();
        catologuePanel = createCatologuePanel();
        menuPanel.setBackground(Color.PINK);
        catologuePanel.setBackground(Color.PINK);
        init();
    }

    // EFFECTS:

    // EFFECTS: Instantiate all buttons, checkboxes and other objects needed to set
    // up panels
    private void initElements() {
        startShoppingButton = createShoppingButton("Start Shopping");
        viewShoppingCartButton = createViewCartButton("View Shopping Cart");
        loadProgressButton = createLoadButton("Load Progress");
        saveProgressButton = createSaveButton("Save Progress");
        quitButton = createQuitButton("Quit");
        removeItemButton = createRemoveButton("Remove item from cart");
        tfCB = new JCheckBox();
        skiiCB = new JCheckBox();
        fbCB = new JCheckBox();
        toCB = new JCheckBox();
        backFromCartButton = createBackButton("Back");
        backFromCatologuButton = createBackButton("Back");
        addToCartButton = createAddToCartButton("Add to Shopping Cart");
        shoppingCartList = new JList<>();
        shoppingCartList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listModel = new DefaultListModel<>();
        tf = new MakeUp("Eye Color Quad Eye Shadow", "Tom Ford");
        skii = new SkinCare("Facial Treatment Cleanser", "SKII");
        fb = new MakeUp("Pro Filtr Soft Matte Longwear Liquid Foundation", "Fenty Beauty");
        to = new SkinCare("Hyaluronic Acid 2% + B5 Hydrating Serum", "The Ordinary");
    }

    // MODIFIES: frame
    // EFFECTS: modifies frame's title, close operation, size, location and panel on
    // top of
    // frame
    private void init() {
        frame.setTitle("Lulu's Store");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(1300, 1300);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        frame.add(menuPanel);
    }

    // EFFECTS: create "shopping" button on menu page that leads to store's
    // catologue when pressed.
    private JButton createShoppingButton(String input) {
        JButton button = new JButton(input);
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                displayCatologue();
            }
        });
        return button;
    }

    // EFFECTS: create "view shopping cart" button on menu page that leads to a
    // JList of items in
    // shopping cart
    private JButton createViewCartButton(String input) {
        JButton button = new JButton(input);
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                displayCart();
            }
        });
        return button;
    }

    // EFFECTS: create "load" button on menu that loads the last saved shopping cart
    // from file
    private JButton createLoadButton(String input) {
        JButton button = new JButton(input);
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loadProgress();
            }
        });
        return button;
    }

    // EFFECTS: create "save" button on menu that saves shopping cart to file
    private JButton createSaveButton(String input) {
        JButton button = new JButton(input);
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                saveProgress();
            }
        });
        return button;
    }

    // EFFECTS: create "quit" button on menu that ends the application and show a
    // picture of Lulu's store
    private JButton createQuitButton(String input) {
        JButton button = new JButton(input);
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showPic();
            }
        });
        return button;
    }

    // EFFECTS: load the image from file and resize it so that it fits the frame
    // when displayed after quit button is pressed
    private void showPic() {
        JPanel imagePanel = new JPanel();
        ImageIcon image1 = new ImageIcon("/Users/lucyluo/CPSC 210/ProjectStarter/images/StoreEnd.jpg");
        Image img = image1.getImage();
        Image img2 = img.getScaledInstance(frame.getWidth(), frame.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon resizedImage = new ImageIcon(img2);
        JLabel imageLabel = new JLabel(resizedImage);
        imagePanel.add(imageLabel);
        frame.setContentPane(imagePanel);
        frame.revalidate();
        frame.repaint();

        startShoppingButton.setVisible(false);
        viewShoppingCartButton.setVisible(false);
        loadProgressButton.setVisible(false);
        saveProgressButton.setVisible(false);

    }

    // EFFECTS: create "back" button for catologue and shopping cart.
    // return to menu when pressed
    private JButton createBackButton(String input) {
        JButton button = new JButton(input);
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.setContentPane(menuPanel);
                frame.revalidate();
                frame.repaint();
            }
        });
        return button;
    }

    // EFFECTS: create "Add to cart" button on store catologue panel
    // adds selected products into shopping cart when pressed.
    // then unselect all checkbox.
    private JButton createAddToCartButton(String input) {
        JButton button = new JButton(input);
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (tfCB.isSelected()) {
                    shoppingCart.addProduct(catologue.updateMakeUp(tf));
                }
                if (skiiCB.isSelected()) {
                    shoppingCart.addProduct(catologue.updateMakeUp(skii));
                }
                if (fbCB.isSelected()) {
                    shoppingCart.addProduct(catologue.updateMakeUp(fb));
                }
                if (toCB.isSelected()) {
                    shoppingCart.addProduct(catologue.updateMakeUp(to));
                }
                checkboxesUnselected();
            }
        });
        return button;
    }

    // EFFECTS: create "remove from cart" button for shopping cart.
    // remove the selected item from shopping cart.
    private JButton createRemoveButton(String input) {
        JButton button = new JButton(input);
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selected = shoppingCartList.getSelectedValue();
                if (selected != null) {
                    if (selected.equals(tf.getName() + ", " + tf.getBrand())) {
                        shoppingCart.removeProduct(catologue.updateMakeUp(tf));
                    } else if (selected.equals(fb.getName() + ", " + fb.getBrand())) {
                        shoppingCart.removeProduct(catologue.updateMakeUp(fb));
                    } else if (selected.equals(skii.getName() + ", " + skii.getBrand())) {
                        shoppingCart.removeProduct(catologue.updateMakeUp(skii));
                    } else if (selected.equals(to.getName() + ", " + to.getBrand())) {
                        shoppingCart.removeProduct(catologue.updateMakeUp(to));
                    }
                }
                frame.setContentPane(createShoppingCartPanel());
                frame.revalidate();
                frame.repaint();
            }
        });
        return button;
    }

    // EFFECTS: create Menu panel that has a start shopping button, a view shopping
    // cart button, a load button,
    // a save button and a quit button.
    public JPanel createMenuPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 5));
        panel.add(startShoppingButton);
        panel.add(viewShoppingCartButton);
        panel.add(loadProgressButton);
        panel.add(saveProgressButton);
        panel.add(quitButton);
        return panel;
    }

    // EFFECTS: create catologue panel that has four check boxes for four products
    // in catologue and
    // an add to cart button and a back button.
    // when back button is pressed, application returns to home page without doing
    // anything.
    // when add to cart button is pressed, all selected products are added to
    // shopping cart.
    public JPanel createCatologuePanel() {
        JPanel panel = new JPanel();
        tfCB.setText("Tom Ford Eye Color Quad Eye Shadow");
        skiiCB.setText("SKII Facial Treatment Cleanser");
        fbCB.setText("Fenty Beauty Pro Filtr Soft Matte Longwear Liquid Foundation");
        toCB.setText("The Ordinary Hyaluronic Acid 2% + B5 Hydrating Serum");
        panel.add(tfCB);
        panel.add(skiiCB);
        panel.add(fbCB);
        panel.add(toCB);
        panel.add(backFromCatologuButton);
        panel.add(addToCartButton);

        return panel;
    }

    // EFFECTS: create a shopping cart panel that display all product in shopping
    // cart with a JList.
    // products are shown with their product names followed by their brands.
    public JPanel createShoppingCartPanel() {
        ArrayList<Product> products = shoppingCart.getShoppingCart();
        ArrayList<String> productsString = new ArrayList<>();
        JPanel newPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 5));
        if (products.isEmpty()) {
            newPanel.add(backFromCartButton);
            newPanel.setBackground(Color.PINK);
            return newPanel;
        } else {
            for (Product p : products) {
                productsString.add(p.getName() + ", " + p.getBrand());
            }
            String[] productsArray = productsString.toArray(new String[0]);
            shoppingCartList = new JList<>(productsArray);
            newPanel.add(shoppingCartList);
            newPanel.add(backFromCartButton);
            newPanel.add(removeItemButton);
            newPanel.setBackground(Color.PINK);
            return newPanel;
        }

    }

    // EFFECTS: sets frame to be visible
    public void show() {
        frame.setVisible(true);
    }

    // EFFECTS: switch the panels on frame to shopping cart panel
    private void displayCart() {
        frame.setContentPane(createShoppingCartPanel());
        frame.revalidate();
        frame.repaint();
    }

    // EFFECTS: switch the panels on frame to catologue panel
    private void displayCatologue() {
        frame.setContentPane(catologuePanel);
        frame.revalidate();
        frame.repaint();
    }

    // EFFECTS: sets all checkboxes to unchecked.
    private void checkboxesUnselected() {
        tfCB.setSelected(false);
        skiiCB.setSelected(false);
        fbCB.setSelected(false);
        toCB.setSelected(false);
    }

    // MODIFIES: this
    // EFFECTS: load shopping cart and purchased list from file
    private void loadProgress() {
        try {
            shoppingCart = jsonReaderSC.readSC();
            System.out.println("Loaded Online store");
        } catch (IOException e) {
            System.out.println("Unable to read from file");
        }
    }

    // EFFECTS: saves the online store to file
    private void saveProgress() {
        try {
            jsonWriterSC.open();
            jsonWriterSC.writeSC(shoppingCart);
            jsonWriterSC.close();
            System.out.println("Saved progress");
        } catch (FileNotFoundException e) {
            System.out.println("Unable to write to file");
        }
    }

}
